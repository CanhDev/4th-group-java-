/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views.DonHang;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Iterator;
import java.util.LinkedHashSet;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import Models.*;
import Controllers.DonHang.*;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author HI
 */
public class QuanLyDonHang extends javax.swing.JFrame {

    /**
     * Creates new form QuanLyDonHang
     */
    
    private LinkedHashSet<DonHang> dsDH = new LinkedHashSet<>();
    private LinkedHashSet<Tour> dsTour = new LinkedHashSet<>();
    private LinkedHashSet<KhachHang> dsKH = new LinkedHashSet<>();
    private DefaultTableModel tblModelDH;
    private ControllerDonHang controllerDH = new ControllerDonHang();
    private ArrayList<DonHang> dsDH2;

//    public void fakeData() {
//        try {
//            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
//            Tour tour1 = new Tour();
//            KhachHang khachHang1 = new KhachHang();
//            //
//            dsTour = (LinkedHashSet<Tour>) controllerDH.readDataFromeFile("Tour_List.txt");
//            dsKH = (LinkedHashSet<KhachHang>) controllerDH.readDataFromeFile("QLKhachHang.txt");
//            tour1 = dsTour.getFirst();
//            khachHang1 = dsKH.getFirst();
//            dsDH.add(new DonHang("DL001", "DLSapa1", LocalDate.parse("14/09/2023", dateFormatter), 3, tour1, khachHang1));
//            dsDH.add(new DonHang("DL002", "DLSapa2", LocalDate.parse("29/05/2022", dateFormatter), 5, tour1, khachHang1));
//            controllerDH.writeToFile(dsDH, "QLDonHang.txt");
//        } catch (Exception ex) {
//            JOptionPane.showMessageDialog(this, ex.toString(), "CÓ LỖI DỮ LIỆU", JOptionPane.ERROR_MESSAGE);
//        }
//    }
    int dongChon = -1;
    DonHang donHang = new DonHang();

    public QuanLyDonHang() {
        initComponents();
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);
//        fakeData();
//------------------------------------------------------------------------------
        if (dsDH == null) {
            dsDH = new LinkedHashSet<>();
        }
        controllerDH = new ControllerDonHang();
        dsTour = (LinkedHashSet<Tour>) controllerDH.readDataFromeFile("Tour_List.txt");
        dsKH = (LinkedHashSet<KhachHang>) controllerDH.readDataFromeFile("QLKhachHang.txt");
        dsDH = (LinkedHashSet<DonHang>) controllerDH.readDataFromeFile("QLDonHang.txt");
        tblModelDH = (DefaultTableModel) tblDonHang.getModel();
        showQuanLyDonHang();
    }

    public void loadTableDonHang() {
        tblDonHang.setModel(new TableDonHang(dsDH));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDonHang = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnThemDonHang = new javax.swing.JButton();
        btnXoaDonHang = new javax.swing.JButton();
        btnSuaDonHang = new javax.swing.JButton();
        btnXemDonHang = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cbSapXep = new javax.swing.JComboBox<>();
        txtTimKiemDonHang = new javax.swing.JTextField();
        btnTimKiemDonHang = new javax.swing.JButton();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản lý đơn hàng");

        tblDonHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã đơn hàng", "Tên đơn hàng", "Ngày lập", "Số ngày du lịch", "Mã tour", "Mã khách hàng", "Tiền thanh toán"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblDonHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDonHangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblDonHang);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnThemDonHang.setText("Thêm đơn hàng");
        btnThemDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemDonHangActionPerformed(evt);
            }
        });
        jPanel1.add(btnThemDonHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, -1, -1));

        btnXoaDonHang.setText("Xóa");
        btnXoaDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaDonHangActionPerformed(evt);
            }
        });
        jPanel1.add(btnXoaDonHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 40, -1, -1));

        btnSuaDonHang.setText("Sửa");
        btnSuaDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaDonHangActionPerformed(evt);
            }
        });
        jPanel1.add(btnSuaDonHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 40, -1, -1));

        btnXemDonHang.setText("Xem chi tiết");
        btnXemDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXemDonHangActionPerformed(evt);
            }
        });
        jPanel1.add(btnXemDonHang, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 40, -1, -1));

        jLabel2.setText("Sắp xếp theo");

        cbSapXep.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã đơn hàng", "Số ngày du lịch", "Tiền thanh toán" }));
        cbSapXep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbSapXepActionPerformed(evt);
            }
        });

        btnTimKiemDonHang.setText("Tìm kiếm");
        btnTimKiemDonHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemDonHangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtTimKiemDonHang, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTimKiemDonHang)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbSapXep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTimKiemDonHang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTimKiemDonHang))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public DonHang getElementAt(int index) {
        Iterator<DonHang> it = dsDH.iterator();
        int currentIndex = 0;
        while (it.hasNext()) {
            DonHang donHang = it.next();
            if (currentIndex == index) {
                return donHang;
            }
            currentIndex++;
        }
        return null;
    }

    private void tblDonHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDonHangMouseClicked
        // TODO add your handling code here:
        dongChon = tblDonHang.getSelectedRow();
        if (dongChon != -1) {
            donHang = getElementAt(dongChon);
        }
    }//GEN-LAST:event_tblDonHangMouseClicked

    private void btnThemDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemDonHangActionPerformed
        // TODO add your handling code here:
        if(dsKH != null && dsTour != null){
            ThemDonHang themDonHang = new ThemDonHang(this, rootPaneCheckingEnabled);
            themDonHang.setVisible(true);
        }
        else{
            JOptionPane.showMessageDialog(rootPane, "Dữ liệu về khách hàng và Tour đang trống");
        }

    }//GEN-LAST:event_btnThemDonHangActionPerformed

    private void cbSapXepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbSapXepActionPerformed
        // TODO add your handling code here:
        int index = cbSapXep.getSelectedIndex();
        if (index == 0) {
            controllerDH.sortByMaDonHang(dsDH);
        } else if (index == 1) {
            controllerDH.sortBySoNgayDuLich(dsDH);
        } else {
            controllerDH.sortByTienThanhToan(dsDH);
        }
        this.showData(dsDH, tblModelDH);
    }//GEN-LAST:event_cbSapXepActionPerformed

    private void btnTimKiemDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemDonHangActionPerformed
        // TODO add your handling code here:
        String tuKhoa = txtTimKiemDonHang.getText();
        if (tuKhoa.length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng nhập thông tin tìm kiếm!");
        } else {
            LinkedHashSet<DonHang> ds = controllerDH.timKiemDonHang(dsDH, tuKhoa);
            if (ds.isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Không tìm thấy đơn hàng phù hợp!");
            } else {
                this.showData(ds, tblModelDH);
            }
        }
    }//GEN-LAST:event_btnTimKiemDonHangActionPerformed

    private void btnXemDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXemDonHangActionPerformed
        // TODO add your handling code here:
        dongChon = tblDonHang.getSelectedRow();
        if (dsDH.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Không có thông tin đơn hàng!");
        } else if (dongChon == -1) {
            JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn đơn hàng cần xem thông tin!");
        } else {
            XemDonHang xemDonHang = new XemDonHang(this, rootPaneCheckingEnabled);
//            ArrayList<DonHang> arrDonHang = new ArrayList<>(dsDH);
            donHang = getElementAt(dongChon);
            xemDonHang.setEditData(donHang);
            xemDonHang.setVisible(true);
        }
    }//GEN-LAST:event_btnXemDonHangActionPerformed

    private void btnXoaDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaDonHangActionPerformed
        // TODO add your handling code here:
        dongChon = tblDonHang.getSelectedRow();

        if (dongChon == -1) {
            JOptionPane.showMessageDialog(rootPane, "Hãy chọn bản ghi cần xóa dữ liệu!");
        } else if (dsDH.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Không có dữ liệu trong bảng!");
        } else {
            int confirm = JOptionPane.showConfirmDialog(
                    rootPane,
                    "Bạn có chắc chắn muốn xóa?",
                    "Xác nhận xóa",
                    JOptionPane.YES_NO_OPTION
            );
            /*           Người dùng chọn Yes sẽ tiến hành xóa thông tin khỏi danh sách và 
            show lại danh sách sau khi xóa */
            if (confirm == JOptionPane.YES_OPTION) {
                donHang = getElementAt(dongChon);
                dsDH.remove(donHang);
                controllerDH.writeToFile(dsDH, "QLDonHang.txt");
                this.showData(dsDH, tblModelDH);
            }
        }
    }//GEN-LAST:event_btnXoaDonHangActionPerformed

    private void btnSuaDonHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaDonHangActionPerformed
        // TODO add your handling code here:
        dongChon = tblDonHang.getSelectedRow();
        if (dongChon == -1) {
            JOptionPane.showMessageDialog(rootPane, "Hãy chọn bản ghi cần sửa dữ liệu!");
        } else if (dsDH.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Không có thông tin để sửa!");
        } else {
            SuaDonHang suaDonHang = new SuaDonHang(this, rootPaneCheckingEnabled);
            donHang = getElementAt(dongChon);
            suaDonHang.setEditData(donHang);
            suaDonHang.setVisible(true);
        }
    }//GEN-LAST:event_btnSuaDonHangActionPerformed

    public void addDonHang(DonHang x) {
        dsDH.add(x);
        showData(dsDH, tblModelDH);
        controllerDH.writeToFile(dsDH, "QLDonHang.txt");
    }
    
    public void updateDonHang(DonHang x) {
        int oldIndex = dongChon;
        donHang = getElementAt(oldIndex);
        dsDH.remove(donHang);
        dsDH.add(x);
        showData(dsDH, tblModelDH);
        controllerDH.writeToFile(dsDH, "QLDonHang.txt");
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyDonHang.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            new QuanLyDonHang().setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public <T> void showData(LinkedHashSet<T> ds, DefaultTableModel model) {
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        model.setRowCount(0);
        for (T t : ds) {
            if (t instanceof DonHang) {
                DonHang donHang = (DonHang) t;
                tblModelDH.addRow(new Object[]{
                    donHang.getMaDonHang(), donHang.getTenDonHang(), donHang.getNgayLap().format(dateFormatter), donHang.getSoNgayDuLich(), donHang.getMaTour(),
                    donHang.getMaKhachHang(), donHang.getTienThanhToan()
                });
            }
        }
    }

    private void showQuanLyDonHang() {
        dsDH = (LinkedHashSet<DonHang>) controllerDH.readDataFromeFile("QLDonHang.txt");
        if (dsDH == null) {
            dsDH = new LinkedHashSet<>();
        }
        this.showData(dsDH, tblModelDH);
    }

    public LinkedHashSet<DonHang> getDSDonHang() {
        return dsDH;
    }

    public LinkedHashSet<Tour> getDSTour() {
        return dsTour;
    }

    public LinkedHashSet<KhachHang> getDSKhachHang() {
        return dsKH;
    }

    public DonHang timDonHangTheoMa(String maDonHang, LinkedHashSet<DonHang> dsDH) {
        for (DonHang dh : dsDH) {
            if (dh.getMaDonHang().equals(maDonHang)) {
                return dh;
            }
        }
        return null;
    }

    public Tour timTourTheoMa(String maTour, LinkedHashSet<Tour> dsTour) {
        for (Tour tour : dsTour) {
            if (tour.getMaTour().equals(maTour)) {
                return tour;
            }
        }
        return null;
    }

    public KhachHang timKhachHangTheoMa(String maKhachHang, LinkedHashSet<KhachHang> dsKH) {
        for (KhachHang khachHang : dsKH) {
            if (khachHang.getMaKhachHang().equals(maKhachHang)) {
                return khachHang;
            }
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSuaDonHang;
    private javax.swing.JButton btnThemDonHang;
    private javax.swing.JButton btnTimKiemDonHang;
    private javax.swing.JButton btnXemDonHang;
    private javax.swing.JButton btnXoaDonHang;
    private javax.swing.JComboBox<String> cbSapXep;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDonHang;
    private javax.swing.JTextField txtTimKiemDonHang;
    // End of variables declaration//GEN-END:variables

}
